// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Robot.

#include "Robot.h"

#include <frc/smartdashboard/SmartDashboard.h>
#include <frc2/command/CommandScheduler.h>
#include <wpi/raw_ostream.h> // for wpi outs()


void Robot::RobotInit() {
//code to be run
frc::CameraServer::GetVideo();
frc::CameraServer::StartAutomaticCapture();
m_container->m_drive.m_drivegyro.Calibrate();

}

/**
 * This function is called every robot packet, no matter the mode. Use
 * this for items like diagnostics that you want to run during disabled,
 * autonomous, teleoperated and test.
 *
 * <p> This runs after the mode specific periodic functions, but before
 * LiveWindow and SmartDashboard integrated updating.
 */
void Robot::RobotPeriodic() {
  frc2::CommandScheduler::GetInstance().Run();
  frc::SmartDashboard::PutNumber("Gyro Angle : ", m_container->m_drive.m_drivegyro.GetAngle());
  frc::SmartDashboard::PutNumber("Gyro Rate : ", m_container->m_drive.m_drivegyro.GetRate());
  frc::SmartDashboard::PutNumber("Accelerometer X : ", m_container->m_drive.m_accelerometer.GetX());
  frc::SmartDashboard::PutNumber("Accelerometer Y : ", m_container->m_drive.m_accelerometer.GetY());
  frc::SmartDashboard::PutNumber("Acceletometer Z : ", m_container->m_drive.m_accelerometer.GetZ());
  //frc::SmartDashboard::PutNumber("cam target id", m_container->m_drive.targetID);

  photonlib::PhotonPipelineResult CamResult = m_container->m_drive.camera.GetLatestResult();
  bool hasTargets = CamResult.HasTargets();
  while(hasTargets)
  {
    m_container->m_drive.AutoBackwards();
  }
}

/**
 * This function is called once each time the robot enters Disabled mode. You
 * can use it to reset any subsystem information you want to clear when the
 * robot is disabled.
 */
void Robot::DisabledInit() {}

void Robot::DisabledPeriodic() {}

/**
 * This autonomous runs the autonomous command selected by your {@link
 * RobotContainer} class.
 */
void Robot::AutonomousInit() {
  m_autonomousCommand = m_container->GetAutonomousCommand();

  if (m_autonomousCommand != nullptr) {
    m_autonomousCommand->Schedule();
  }
}

void Robot::AutonomousPeriodic() {
  m_autonomousCommand->Execute();
}

void Robot::TeleopInit() {
  // This makes sure that the autonomous stops running when
  // teleop starts running. If you want the autonomous to
  // continue until interrupted by another command, remove
  // this line or comment it out.
  if (m_autonomousCommand != nullptr) {
    m_autonomousCommand->Cancel();
    m_autonomousCommand = nullptr;
  }
}

/**
 * This function is called periodically during operator control.
 */
void Robot::TeleopPeriodic() {
//code to be run
}

/**
 * This function is called periodically during test mode.
 */
void Robot::TestPeriodic() {}

#ifndef RUNNING_FRC_TESTS
int main() { 
  return frc::StartRobot<Robot>();
}
#endif
