// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

#pragma once

#include <frc/DigitalInput.h> 
#include <frc/motorcontrol/Spark.h>
//#include <frc/AnalogPotentiometer.h>
#include <frc2/command/SubsystemBase.h>
#include <frc/motorcontrol/MotorControllerGroup.h>
#include <frc/DoubleSolenoid.h>
#include <frc2/command/WaitCommand.h>

class Arm: public frc2::SubsystemBase {

private:
    frc::Spark m_armPivotMotor1{1}; //tuned value
    frc::Spark m_armPivotMotor2{6}; //tuned value
    frc::MotorControllerGroup m_armPivotMotors{m_armPivotMotor1, m_armPivotMotor2};
    frc::Spark m_armExtendMotor{0}; //tuned value

    frc::DoubleSolenoid m_armLockSolenoid{frc::PneumaticsModuleType::REVPH, 2, 3}; //TODO: Correct Module Type? && Tuned Values
    //frc::DigitalInput frontLimitSwitch{2}; //tuned value
    //frc::DigitalInput backLimitSwitch{5}; //tuned value
    //frc::AnalogPotentiometer potentiometer{0, 180, 30};
    

public:
    Arm();

    void Periodic() override;
    void SimulationPeriodic() override;
    void ArmExtend();
    void ArmRetract();
    void ArmForward();
    void ArmBackward();
    void ArmPivotStop();
    void ArmExtendStop();
    void AutoArmBackward();
    void ArmLock();
    void ArmUnlock();
    //double m_potentiometer = potentiometer.Get();
};